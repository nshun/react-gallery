{"version":3,"sources":["components/Header.js","components/ImageDetail.js","components/Image.js","components/List.js","components/Page.js","components/Footer.js","App.js","serviceWorker.js","index.js","broken-link.svg","logo.svg"],"names":["Header","react_default","a","createElement","className","src","logo","alt","Component","Image","this","props","toggleImage","id","_this","detail","url","description","title","brokenImage","width","height","onClick","onError","e","target","onerror","TwitterShareButton","window","location","href","concat","TwitterIcon","size","round","click","loading","List","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleScroll","evt","bodyRect","document","body","getBoundingClientRect","getElementById","top","scrollY","innerHeight","listImagesApi","urlParams","URLSearchParams","search","state","limit","offset","images","clickedImageId","get","bind","assertThisInitialized","_this2","fetch","method","then","res","json","ok","data","setState","setInterval","addEventListener","_this3","length","map","image","i","lib_default","once","Image_Image","key","Page","getImageApi","history","pushState","newurl","protocol","host","pathname","path","ImageDetail_Image","List_List","App","Header_Header","Page_Page","Footer_Header","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.68055f95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport logo from \"../logo.svg\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <span>React Gallery App</span>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TwitterShareButton, TwitterIcon } from \"react-share\";\r\nimport brokenImage from \"../broken-link.svg\";\r\n\r\nexport default class Image extends Component {\r\n  onClick() {\r\n    this.props.toggleImage(this.props.id || \"\");\r\n  }\r\n\r\n  render() {\r\n    const detail = this.props.detail;\r\n    if (!detail.url) {\r\n      return <div className=\"hidden\" />;\r\n    } else {\r\n      return (\r\n        <div className=\"popup\">\r\n          <div className=\"popup-header\">\r\n            <h2>{detail.description}</h2>\r\n          </div>\r\n          <div className=\"popup-inner\">\r\n            <img\r\n              className=\"detail-image\"\r\n              alt={detail.description || \"\"}\r\n              title={detail.title || \"\"}\r\n              src={detail.url || brokenImage}\r\n              width={detail.width || \"\"}\r\n              height={detail.height || \"\"}\r\n              onClick={() => this.onClick()}\r\n              onError={e => {\r\n                e.target.onerror = \"\";\r\n                e.target.src = brokenImage;\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"popup-footer\">\r\n            <TwitterShareButton\r\n              url={window.location.href}\r\n              title={`${detail.description} \"${detail.title}\"`}\r\n            >\r\n              <TwitterIcon size={32} round />\r\n            </TwitterShareButton>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport brokenImage from \"../broken-link.svg\";\r\n\r\nexport default class Image extends Component {\r\n  onClick() {\r\n    this.props.click(this.props.detail.id);\r\n  }\r\n\r\n  render() {\r\n    const detail = this.props.detail;\r\n    return (\r\n      <img\r\n        className=\"list-image\"\r\n        alt={detail.description || \"\"}\r\n        title={detail.title || \"\"}\r\n        src={detail.url || brokenImage}\r\n        width={detail.width || \"\"}\r\n        height={detail.height || \"\"}\r\n        onClick={() => this.onClick()}\r\n        onError={e => {\r\n          e.target.onerror = \"\";\r\n          e.target.src = brokenImage;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport Image from \"./Image\";\r\n\r\nlet loading = false;\r\n\r\nexport default class List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    this.state = {\r\n      limit: 24,\r\n      offset: 0,\r\n      images: [],\r\n      clickedImageId: urlParams.get(\"id\") || \"\",\r\n    };\r\n    this.listImagesApi = this.listImagesApi.bind(this);\r\n    this.toggleImage = this.props.toggleImage.bind(this);\r\n  }\r\n\r\n  listImagesApi() {\r\n    if (loading) return;\r\n    loading = true;\r\n    fetch(\r\n      `https://wfc-2019.firebaseapp.com/images?limit=${\r\n        this.state.limit\r\n      }&offset=${this.state.offset}`,\r\n      {\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(json => {\r\n        if (json.ok) {\r\n          const images = json.data.images;\r\n          this.setState({\r\n            offset: this.state.offset + this.state.limit,\r\n            images: this.state.images.concat(images),\r\n          });\r\n          loading = false;\r\n        } else {\r\n          setInterval(this.listImagesApi, 1000);\r\n        }\r\n      });\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.listImagesApi();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n\r\n  handleScroll = evt => {\r\n    var bodyRect = document.body.getBoundingClientRect(),\r\n      elemRect = document.getElementById(\"footer\").getBoundingClientRect(),\r\n      offset = elemRect.top - bodyRect.top;\r\n    if (offset < window.scrollY + 3 * window.innerHeight) {\r\n      this.listImagesApi();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const images = this.state.images;\r\n    if (0 === images.length) {\r\n      return <h1> Loading... </h1>;\r\n    } else {\r\n      const listImages = images.map((image, i) => {\r\n        return (\r\n          <LazyLoad height=\"25vmin\" once offset={500}>\r\n            <Image key={i} detail={image} click={this.toggleImage} />{\" \"}\r\n          </LazyLoad>\r\n        );\r\n      });\r\n      return listImages;\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ImageDetail from \"./ImageDetail\";\r\nimport List from \"./List\";\r\n\r\nexport default class Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    this.state = {\r\n      detail: {},\r\n      clickedImageId: urlParams.get(\"id\") || \"\",\r\n    };\r\n    this.toggleImage = this.toggleImage.bind(this);\r\n    this.getImageApi = this.getImageApi.bind(this);\r\n  }\r\n\r\n  getImageApi(id) {\r\n    if (id && id !== \"\") {\r\n      fetch(`https://wfc-2019.firebaseapp.com/image/${id}`, {\r\n        method: \"GET\",\r\n      })\r\n        .then(res => {\r\n          return res.json();\r\n        })\r\n        .then(json => {\r\n          if (json.ok) {\r\n            this.setState({\r\n              detail: json.data,\r\n            });\r\n          } else {\r\n            setInterval(this.getImageApi(id), 1000);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  toggleImage(id) {\r\n    this.getImageApi(id);\r\n    if (window.history.pushState) {\r\n      let newurl =\r\n        window.location.protocol +\r\n        \"//\" +\r\n        window.location.host +\r\n        window.location.pathname;\r\n      if (id !== \"\" && this.state.clickedImageId !== id) {\r\n        newurl += `?id=${id}`;\r\n      }\r\n      window.history.pushState(\r\n        {\r\n          path: newurl,\r\n        },\r\n        \"\",\r\n        newurl\r\n      );\r\n    }\r\n\r\n    if (id === \"\") {\r\n      this.setState({\r\n        detail: {},\r\n        clickedImageId: \"\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        clickedImageId: this.state.clickedImageId === id ? \"\" : id,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getImageApi(this.state.clickedImageId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App-body\">\r\n        <ImageDetail\r\n          toggleImage={this.toggleImage}\r\n          detail={this.state.detail}\r\n        />\r\n        <List toggleImage={this.toggleImage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <footer id=\"footer\" className=\"App-footer\">\r\n        <a className=\"App-link\" href=\"\">\r\n          footer\r\n        </a>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Page from \"./components/Page\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Page />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/broken-link.dafb506b.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}