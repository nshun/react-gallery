{"version":3,"sources":["logo.svg","broken-link.svg","components/Header.js","components/Image.js","components/List.js","components/Page.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","Component","Image","_this$props$detail","this","props","detail","url","description","title","brokenImage","List","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","images","clicked","listImagesApi","bind","assertThisInitialized","_this2","fetch","method","then","res","json","ok","data","setState","setInterval","length","map","image","i","Image_Image","key","Page","List_List","href","App","Header_Header","Page_Page","Footer_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qQCGnBC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,yCAL4BK,qCCAfC,mLACV,IAAAC,EAKHC,KAAKC,MAAMC,OAHbC,EAFKJ,EAELI,IACAC,EAHKL,EAGLK,YACAC,EAJKN,EAILM,MAEF,OACEf,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVG,IAAKQ,GAAe,GACpBC,MAAOA,GAAS,GAChBX,IAAKS,GAAOG,aAZeT,aCAdU,cACnB,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KACDa,MAAQ,CACXC,OAAQ,GACRC,QAAS,IAEXR,EAAKS,cAAgBT,EAAKS,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANJA,+EASH,IAAAY,EAAApB,KACdqB,MAAM,2DAA4D,CAChEC,OAAQ,QACPC,KAAK,SAAAC,GACN,OAAOA,EAAIC,SACVF,KAAK,SAAAE,GACN,GAAIA,EAAKC,GAAI,CACX,IAAMX,EAASU,EAAKE,KAAKZ,OACzBK,EAAKQ,SAAS,CAAEb,OAAQA,SAExBc,YAAYT,EAAKH,cAAe,oDAMpCjB,KAAKiB,6DAILjB,KAAK4B,SAAS,4CAId,IAAMb,EAASf,KAAKc,MAAMC,OAC1B,OAAI,IAAMA,EAAOe,OACRxC,EAAAC,EAAAC,cAAA,0BAEYuB,EAAOgB,IACxB,SAACC,EAAOC,GAAR,OAAc3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAOC,IAAKF,EAAG/B,OAAQ8B,aAvCXnC,aCAbuC,mLAEjB,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAC6C,EAAD,cAJ0BxC,aCDbR,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACV6C,KAAK,IAFP,kBAJ4BzC,aCkBrB0C,0LAVX,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,cANU7C,cCIE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.c61a8f4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/broken-link.dafb506b.svg\";","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <span>\r\n          React Gallery App\r\n        </span>\r\n      </header>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport brokenImage from '../broken-link.svg';\r\n\r\nexport default class Image extends Component {\r\n  render() {\r\n    const {\r\n      url,\r\n      description,\r\n      title\r\n    } = this.props.detail;\r\n    return (\r\n      <img\r\n        className=\"list-image\"\r\n        alt={description || \"\"}\r\n        title={title || \"\"}\r\n        src={url || brokenImage}\r\n      />);\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Image from './Image';\r\n\r\nexport default class List extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images: [],\r\n      clicked: \"\"\r\n    };\r\n    this.listImagesApi = this.listImagesApi.bind(this);\r\n  }\r\n\r\n  listImagesApi() {\r\n    fetch('https://wfc-2019.firebaseapp.com/images?limit=20&offset=', {\r\n      method: 'GET',\r\n    }).then(res => {\r\n      return res.json();\r\n    }).then(json => {\r\n      if (json.ok) {\r\n        const images = json.data.images;\r\n        this.setState({ images: images });\r\n      } else {\r\n        setInterval(this.listImagesApi, 1000);\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.listImagesApi();\r\n  }\r\n\r\n  handleClickedImage() {\r\n    this.setState(\"clicked\");\r\n  }\r\n\r\n  render() {\r\n    const images = this.state.images;\r\n    if (0 === images.length) {\r\n      return <h1> Loading... </h1>\r\n    } else {\r\n      const listImages = images.map(\r\n        (image, i) => <Image key={i} detail={image} />\r\n      );\r\n      return listImages;\r\n    }\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport List from './List';\r\n\r\nexport default class Page extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App-body\">\r\n        <List />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"App-footer\">\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"\"\r\n        >\r\n          footer\r\n        </a>\r\n      </footer >\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport LazyLoad from 'react-lazyload';\nimport Header from './components/Header';\nimport Page from './components/Page';\nimport Footer from './components/Footer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Page />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}